package service

/*
 *    0                   1                   2                   3
 *    7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |V=2|P|X|  CC   |M|     PT      |       sequence number         |
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |                           timestamp                           |
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *   |           synchronization source (SSRC) identifier            |
 *   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
 *   |            contributing source (CSRC) identifiers             |
 *   :                             ....                              :
 *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *
 */

const (
	// first 8 bytes
	CSRCLen       = 0b11110000 //CSRC计数器，占4位，指示CSRC 标识符的个数。
	CSRCLeft      = 4
	Extension     = 0b00001000 //占1位，如果X=1，则在RTP报头后跟有一个扩展报头。
	ExtensionLeft = 3
	Padding       = 0b00000100 //填充标志，占1位，如果P=1，则在该报文的尾部填充一个或多个额外的八位组，它们不是有效载荷的一部分。
	PaddingLeft   = 2
	Version       = 0b00000011 //RTP协议的版本号，占2位，当前协议版本号为2。

	// second 8 bytes
	PayloadType     = 0b11111110 //有效载荷类型，占7位，用于说明RTP报文中有效载荷的类型，如GSM音频、JPEM图像等。
	PayloadTypeLeft = 1
	Marker          = 0b00000001 //标记，占1位，不同的有效载荷有不同的含义，对于视频，标记一帧的结束；对于音频，标记会话的开始。
)

type RtpHeader struct {
	/* byte 0 */
	First byte

	/* byte 1 */
	Second byte

	/* bytes 2,3 */
	Seq uint16 //占16位，用于标识发送者所发送的RTP报文的序列号，每发送一个报文，序列号增1。接收者通过序列号来检测报文丢失情况，重新排序报文，恢复数据。

	/* bytes 4-7 */
	Timestamp uint32 //占32位，时戳反映了该RTP报文的第一个八位组的采样时刻。接收者使用时戳来计算延迟和延迟抖动，并进行同步控制。

	/* bytes 8-11 */
	SSRC uint32 //占32位，用于标识同步信源。该标识符是随机选择的，参加同一视频会议的两个同步信源不能有相同的SSRC。

	/*标准的RTP Header 还可能存在 0-15个特约信源(CSRC)标识符

	  每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源
	*/
}
